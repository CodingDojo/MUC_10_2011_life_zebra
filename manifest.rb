{:visible_files=>{"cyberdojo.sh"=>{:scroll_left=>"0", :content=>"gmcs -t:library Untitled.cs\nif [ $? -eq 0 ]; then\n  gmcs -t:library -r:Untitled.dll -r:nunit.framework.dll UntitledTest.cs\n  if [ $? -eq 0 ]; then\n    nunit-console -nologo UntitledTest.dll\n  fi\nfi\n\n", :caret_pos=>"0", :scroll_top=>"0"}, "output"=>{:scroll_left=>"0", :content=>".F.\n1 1 0 0 0 \n1 1 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n.\nTests run: 3, Failures: 1, Not run: 0, Time: 0.075 seconds\r\n\r\nTest Case Failures:\r\n1) UntitledTest.TestCellWithMoreThanCellLiveNeighboursDies :   Expected: 4\n  But was:  2\n\r\nat UntitledTest.TestCellWithMoreThanCellLiveNeighboursDies () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n\r\n", :caret_pos=>"548", :scroll_top=>"0"}, "Untitled.cs"=>{:scroll_left=>"0", :content=>"using System.Collections.Generic;\nusing System;\n\npublic class Game {\n    private int[,] table;\n    private int xBound;\n    private int yBound;\n\n    public Game(int x, int y, List<string> liveCells) {\n        table = new int[x, y];\n        xBound = x;\n        yBound = y;\n        foreach(var cell in liveCells) {\n            var coords = cell.Split(new char[] {','});\n\n            table[int.Parse(coords[0]), int.Parse(coords[1])] = 1;\n        }\n    }  \n\n    public int LiveCellsCount() {\n        int count = 0;\n\n        for(int i = 0; i < xBound; i++) {\n            for(int j = 0; j < yBound; j++) {\n                if(table[i,j] == 1) count++;\n            }\n        }\n\n        return count;\n    }\n\n    public void Evolve() {\n        for(int i = 0; i < xBound; i++) {\n            for(int j = 0; j < yBound; j++) {\n                var aliveNeighbours = GetAliveNeighboursCount(i, j);\n                if (aliveNeighbours < 2) {\n                    table[i, j] = 0;\n                }\n                if (aliveNeighbours > 3) {\n                    table[i, j] = 0;\n                } \n\n                if (aliveNeighbours == 3) {\n                    table[i, j] = 1;\n                }\n  \n            }\n        }\n    }\n\n    public int GetAliveNeighboursCount(int x, int y) {\n        int count = 0;\n\n        count += CheckBoundaries(x-1, y-1);\n        count += CheckBoundaries(x-1, y);\n        count += CheckBoundaries(x-1, y+1);\n        count += CheckBoundaries(x, y-1);\n        count += CheckBoundaries(x, y+1);\n        count += CheckBoundaries(x+1, y-1);\n        count += CheckBoundaries(x+1, y);\n        count += CheckBoundaries(x+1, y+1);\n\n        return count;\n    }\n\n    public void PrintTable(){\n        Console.WriteLine();\n        for(int i = 0; i < xBound; i++) {\n            for(int j = 0; j < yBound; j++) {\n                Console.Write(table[i,j]);\n                Console.Write(\" \");        \n            }\n            Console.WriteLine(\"\");\n        }\n    }\n\n    public int CheckBoundaries(int x, int y) {\n        if(x < 0 || y < 0) {\n            return 0;\n        }\n\n        if(x > xBound-1 || y > yBound-1) {\n            return 0;\n        }\n\n        return table[x, y];\n    }\n} ", :caret_pos=>"241", :scroll_top=>"212"}, "UntitledTest.cs"=>{:scroll_left=>"0", :content=>"using System;\nusing NUnit.Framework;\nusing System.Collections.Generic;\n\n[TestFixture]\npublic class UntitledTest\n{\n    [Test]\n    public void TestOneCellDiesAfterEvolution() {\n        Game game = new Game(5,5, new List<string>() {\"0,0\"});\n\n        game.Evolve();\n\n        Assert.AreEqual(0, game.LiveCellsCount());\n    }\n\n    [Test]\n    public void TestCellWithMoreThanCellLiveNeighboursDies() {\n        Game game = new Game(\n            5,5, new List<string>() \n                {\"0,0\", \"1,0\", \"1,1\",\"2,0\",\"2,1\"});\n\n        game.Evolve();\n        //game.PrintTable();\n\n        Assert.AreEqual(4, game.LiveCellsCount());\n    }\n   [Test]\n    public void TestCellWithThreeLiveNeighboursRespawns() {\n        Game game = new Game(\n            5,5, new List<string>() \n                {\"0,0\", \"0,1\", \"1,0\"});\n\n        game.Evolve();\n        game.PrintTable();\n\n        Assert.AreEqual(4, game.LiveCellsCount());\n    }\n\n}\n\n", :caret_pos=>"911", :scroll_top=>"170"}, "instructions"=>{:scroll_left=>"0", :content=>"Your task is to write a program to calculate the next\ngeneration of Conway's game of life, given any starting\nposition. You start with a two dimensional grid of cells, \nwhere each cell is either alive or dead. The grid is finite, \nand no life can exist off the edges. When calculating the \nnext generation of the grid, follow these four rules:\n\n1. Any live cell with fewer than two live neighbours dies, \n   as if caused by underpopulation.\n2. Any live cell with more than three live neighbours dies, \n   as if by overcrowding.\n3. Any live cell with two or three live neighbours lives \n   on to the next generation.\n4. Any dead cell with exactly three live neighbours becomes \n   a live cell.\n\nExamples: * indicates live cell, . indicates dead cell\n\nExample input: (4 x 8 grid)\n4 8\n........\n....*...\n...**...\n........\n\nExample output:\n4 8\n........\n...**...\n...**...\n........\n\n", :caret_pos=>"0", :scroll_top=>"0"}}, :output=>".F.\n1 1 0 0 0 \n1 1 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n.\nTests run: 3, Failures: 1, Not run: 0, Time: 0.075 seconds\r\n\r\nTest Case Failures:\r\n1) UntitledTest.TestCellWithMoreThanCellLiveNeighboursDies :   Expected: 4\n  But was:  2\n\r\nat UntitledTest.TestCellWithMoreThanCellLiveNeighboursDies () [0x00000]\nat (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)\nat System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]\n\r\n\r\n", :current_filename=>"output"}
